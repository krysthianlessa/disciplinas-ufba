PROG' -> PROT_FUNC
EXP_ARIT -> EXP1
EXP1 -> EXP2 + EXP1
EXP1 -> EXP2 - EXP1
EXP1 -> EXP2
EXP2 -> EXP3 * EXP2
EXP2 -> EXP3 / EXP2
EXP2 -> EXP3 % EXP2
EXP2 -> EXP3
EXP3 -> - EXP3
EXP3 -> EXP4
EXP4 -> ( EXP1 )
EXP4 -> id
EXP4 -> num
EXP4 -> str
EXP4 -> CALL_FUNC
PROT_FUNC -> FUNC
PROT_FUNC -> tipo id ( PARAM ) ; PROT_FUNC
PROT_FUNC -> nada id ( PARAM ) ; PROT_FUNC
FUNC -> tipo id ( PARAM ) { DEC_VAR BLOCO_COD } FUNC
FUNC -> nada id ( PARAM ) { DEC_VAR BLOCO_COD } FUNC
FUNC -> int mainha ( ) { DEC_VAR BLOCO_COD }
PARAM -> ''
PARAM -> PARAM1
PARAM1 -> tipo id
PARAM1 -> tipo id [ ] 
PARAM1 -> PARAM1 , tipo id
PARAM1 -> PARAM1 , tipo id [ ]
DEC_VAR -> ''
DEC_VAR -> tipo id ; DEC_VAR
DEC_VAR -> tipo id = EXP_ARIT ; DEC_VAR
DEC_VAR -> tipo id [ EXP_ARIT ] ; DEC_VAR
BLOCO_COD -> ''
BLOCO_COD -> CALL_FUNC ; BLOCO_COD
BLOCO_COD -> LACO_REPE BLOCO_COD
BLOCO_COD -> EST_COND BLOCO_COD
BLOCO_COD -> ATRIB ; BLOCO_COD
BLOCO_COD -> vaza ; BLOCO_COD
BLOCO_COD -> tome ; BLOCO_COD
BLOCO_COD -> tome EXP_ARIT ; BLOCO_COD
CALL_FUNC -> id ( ATRIBUT )
LACO_REPE -> uai ( EXP_REL ) { BLOCO_COD }
EST_COND -> se ( EXP_REL ) { BLOCO_COD } senao { BLOCO_COD }
EST_COND -> se ( EXP_REL ) { BLOCO_COD }
ATRIB -> id = EXP_ARIT
ATRIB -> id [ EXP_ARIT ] = EXP_ARIT
ATRIBUT -> ''
ATRIBUT -> EXP_ARIT
ATRIBUT -> ATRIBUT , EXP_ARIT
EXP_REL -> EXP_R1
EXP_R1 -> EXP_R2 ou EXP_R1
EXP_R1 -> EXP_R2
EXP_R2 -> EXP_R3 e EXP_R2
EXP_R2 -> EXP_R3
EXP_R3 -> EXP_R4 cmp EXP_R3
EXP_R3 -> EXP_R4
EXP_R4 -> nao EXP_R4
EXP_R4 -> EXP_R5
EXP_R5 -> EXP_ARIT